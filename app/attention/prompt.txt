注意事项:

    1.Config.gradle
        在AndroidStudio中使用多Module的时候,每个Module下都会生成build.gradle文件,每个build.gradle文件都有
        自己的一套sdk版本和依赖,这如果被其他同事使用的话,需要知道每个build.gradle的版本依次解决,这样总感觉麻烦。
        所以,使用config.gradle统一管理自己项目下的版本号、签名、appId和依赖等,是非常清晰的管理自己的Module 。

        1).在项目根目录的Gradle下添加  apply from: "config.gradle"
        2).用法：rootProject.ext.自定义类名字["自定义的名字"]

    2.Android Studio3.xx新的依赖方式 implementation、api、compileOnly详解

        implementation：只能在内部使用此模块，比如我在一个libiary中使用implementation依赖了gson库，
                        然后我的主项目依赖了libiary，那么，我的主项目就无法访问gson库中的方法。这样的好处是编译速度会加快，
                        推荐使用implementation的方式去依赖，如果你需要提供给外部访问，那么就使用api依赖即可

        compile（api）
        这种是我们最常用的方式，使用该方式依赖的库将会参与编译和打包。

        provided（compileOnly）
        只在编译时有效，不会参与打包
        可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。

        apk（runtimeOnly）
        只在生成apk的时候参与打包，编译时不会参与，很少用。

        testCompile（testImplementation）
        testCompile 只在单元测试代码的编译以及最终打包测试apk时有效。

        debugCompile（debugImplementation）
        debugCompile 只在debug模式的编译和最终的debug apk打包时有效

        releaseCompile（releaseImplementation）
        Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。

        exclude group:表示只要包含com.android.support的都排除
        例如：api("com.afollestad.material-dialogs:core:0.9.5.0") {
                exclude group: 'com.android.support'
            }

        module：删排除group中的指定module
        例如：api("com.afollestad.material-dialogs:core:0.9.5.0") {
                   exclude group: 'com.android.support', module: 'support-v13'
                   exclude group: 'com.android.support', module: 'support-vector-drawable'
               }

        在我们自己创建library给别人使用时，如果需要依赖com.android.support的话，建议用provided的方式依赖
       （android studio3.0中更改为compileOnly），这样只会在编译时有效，不会参与打包。以免给使用者带来不便。
        例如：provided（compileOnly） 'com.android.support:appcompat-v7:26.1.0'




    /**
         * 开发规范：
         *
         *        1、activity定义类。                     如：LoginActivity
         *
         *        2、fragment定义类。                     如：HomeFragment
         *
         *        3、adapter包下适配器定义。               如：LoginAdapter
         *
         *        4、entity包下包装类定义。                如：LoginEntity
         *
         *        5、map包下的engine包接口View类定义。      如：LoginView
         *
         *        6、map包下的presenter包请求逻辑类。       如：LoginPresenter
         *
         *        7、database包下数据库。                  如：FriendDataEntry
         *
         *    注：其他类遵守Android统一开发规范
         *
         * */


        /**
         * 项目结构：
         *        1、activity包：
         *              下面都有3个子包，用于存放3个 fragment 下新建的activity资源类,其他新建在外
         *
         *        2、adapter包：
         *              适配器
         *
         *        3、application包
         *              (你懂得)
         *
         *        4、base包
         *              activity 和 fragment 的基类
         *
         *        5、constant包
         *              常量类、URL拼接存放类
         *
         *        6、entitty包
         *              下面都有3个子包，用于存放3个 fragment 下新建的activity资源类，其他新建在外
         *
         *        7、fragment包
         *              (你懂得)
         *
         *        8、map包
         *              A、engine包存放 activity、fragment的界面 View接口
         *              B、presenter包存放 activity、fragment的请求交互逻辑
         *              C、presenter基类
         *              D、被activity、fragment继承的MvpActivity、MvpFragment基类
         *
         *        9、receiver包
         *              (你懂得)
         *
         *        10、rxjava包
         *              创建okhhttp3请求的实例，及绑定的加载动画和相应的接口实现
         *
         *        11、utils包
         *              (你懂得)
         *
         *        12、views包
         *              自定义View
         *
         *        13、database
         *              orm数据库
         *
         * */


        /**
         * 项目开发流程：
         * 1、activity
         *
         *      A、所有 activity 都需继承 MvpActivity
         *
         *      B、MvpActivity的定义泛型 (在map包下的 presenter包中构造一个presenter类)
         *
         *          a、构造的presenter需继承Basepresenter,并拿到请求的实例调用封装的参数发起请求
         *                  movieService = AppClient.retrofit().create(MovieService.class);
         *
         *      D、当前activity的 View接口按钮定义的点击实现 (在map包下的 engine包中构造一个view类)
         *
         *          a、构造的view接口类需继承BaseAppView,
         *
         *
         *
         *
         *   activity中重写方法说明：
         *
         *      A、实例化presenter对象
         *          protected SplashPresenter createPresenter(){}
         *
         *      B、处理当前页面状态栏颜色
         *          protected void onCreateBefore(){}
         *
         *      C、加载xml文件，注册 ButterKnife ------2件事
         *          protected void setupViews(){}
         *
         *      D、 注册监听
         *          protected void setListener()
         *
         *      E、当前账号被占用时提示并跳转登录页
         *          public void toLoginMotion()
         *
         * */
         
         
         
         
       